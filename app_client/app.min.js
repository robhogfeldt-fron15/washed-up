(function () {

  angular.module('meanApp', ['ngRoute']);

  function config ($routeProvider, $locationProvider) {
    $routeProvider
      .when('/', {
        templateUrl: 'home/home.view.html',
        controller: 'homeCtrl',
        controllerAs: 'vm'
      })
      .when('/register', {
        templateUrl: '/auth/register/register.view.html',
        controller: 'registerCtrl',
        controllerAs: 'vm'
      })
      .when('/login', {
        templateUrl: '/auth/login/login.view.html',
        controller: 'loginCtrl',
        controllerAs: 'vm'
      })
      .when('/profile', {
        templateUrl: '/admin/admin.view.html',
        controller: 'adminCtrl',
        controllerAs: 'vm'
      })
      .when('/user', {
        templateUrl: '/user/user.view.html',
        controller: 'userCtrl',
        controllerAs: 'vm'
      })
      .otherwise({redirectTo: '/'});

    // use the HTML5 History API
    $locationProvider.html5Mode(true);
  }

  function run($rootScope, $location, authentication) {
    $rootScope.$on('$routeChangeStart', function(event, nextRoute, currentRoute) {
      if ($location.path() === '/profile' && !authentication.isLoggedIn()) {
         $location.path('/');
      } else if ($location.path() === '/user' && !authentication.isLoggedIn()) {
         $location.path('/');
      }

    });
  }

  angular
    .module('meanApp')
    .config(['$routeProvider', '$locationProvider', config])
    .run(['$rootScope', '$location', 'authentication', run]);

})();

(function() {

  angular
    .module('meanApp')
    .controller('adminCtrl', adminCtrl);

  adminCtrl.$inject = ['$location', 'meanData', 'Machines', 'Users', 'Timeslot'];

  function adminCtrl($location, meanData, Machines, Users, Timeslot) {
    var vm = this;

    vm.user = {};
    vm.activeUser = {};

    meanData.getProfile()
      .success(function(data) {
        vm.user = data;
      })
      .error(function(e) {
        console.log(e);
      });



    vm.getMachines = function() {
      Machines.getMachines()
        .success(function(data) {
          vm.machines = data;
        });
    }

    vm.deleteMachine = function(id) {

      Machines.deleteMachine(id)
        .success(function(data) {
          vm.machines = data;
          vm.getMachines();
        });
    }

    vm.createMachine = function(machine) {
      console.log(machine);
      Machines.createMachine(machine)
        .success(function(data) {
          vm.loading = false;
          vm.getMachines();

        });
    }

    vm.showUserStat = function(user) {
      vm.activeUser = user;
      Timeslot.getByUser(null, user._id)
        .success(function(data) {
          vm.userSlots = data.filter(function(user) {
            return user.role !== 'admin'
          })
          console.log(data);
        });
    }

    getUsers();

  function getUsers() {
    Users.getUsers()
        .success(function(data) {
          console.log(data);
            vm.allUsers = data;

        });
      };

    vm.getMachines();

  }

})();

(function() {

  angular
    .module('meanApp')
    .controller('homeCtrl', homeCtrl);

    function homeCtrl () {
      console.log('Home controller is running');

      var vm = this;

      // vm.add = function() {
      //   alert('äää');
      // }
    }

})();

(function() {

  angular
    .module('meanApp')
    .controller('userCtrl', userCtrl);

  userCtrl.$inject = ['$location', 'meanData', 'Machines','Timeslot'];

  function userCtrl($location, meanData, Machines, Timeslot) {
    var vm = this;

    vm.user = {};
    vm.activeMachine = null;
    vm.showDates = false;

    vm.showSchedule = function(machine) {
         vm.activeMachine = machine;
         vm.showDates = true;
         console.log(machine);
     };


    meanData.getProfile()
      .success(function(data) {
        vm.user = data;
        vm.bookings(vm.user._id)
      })
      .error(function(e) {
        console.log(e);
      });

      getSlots();
      getMachines();

      vm.bookings = function(user) {

        Timeslot.getByUser(null, user)
          .success(function(data) {
            vm.bookings = data;
            console.log(data);
          });
      }


     function getSlots() {
       Timeslot.getTimeslots()
           .success(function(data) {
             console.log(data);
               vm.allSlots = data;

           });
         };

     function getMachines() {
         Machines.getMachines()
             .success(function(data) {
                 vm.machines = data;
                 console.log(vm.machines);
                 vm.loading = false;
             });
           }


        vm.checkDate = function() {

          vm.slotArray = [];
          vm.slotArray.push({name:"morgon", isTaken:false });
          vm.slotArray.push({name:"formiddag", isTaken:false });
          vm.slotArray.push({name:"eftermiddag", isTaken:false });
          vm.slotArray.push({name:"kvall", isTaken:false });

          var takenSlots = [];
            Timeslot.getByMachine(vm.activeMachine._id)
              .success(function(slots) {

                  takenSlots = slots.filter(function(slot) {
                    console.log(slot , vm.slot.date.toLocaleDateString());
                    return slot.date === vm.slot.date.toLocaleDateString();
                  });

                   for (var i = 0; i < takenSlots.length; i++) {
                    vm.slotArray.filter(function functionName(item) {
                      if (item.name === takenSlots[i].slot ) {
                         item.isTaken = true;
                         return item;
                     } else {
                       return item;
                     }
                    })
                  }
                  console.log(takenSlots);
              });

        }

        vm.bookSlot = function(slot) {

        if (!vm.activeMachine || !vm.user || !vm.slot || !vm.slot.name ) {
          alert('Fyll i alla fält');
          return;
        }


         var slot = {
           machineId: vm.activeMachine._id,
           userId: vm.user._id,
           date: vm.slot.date.toLocaleDateString(),
           slot: vm.slot.name,
           isTaken: true
         }

         Timeslot.createTimeslot(slot)
         .success(function(data) {

           vm.checkDate();
           vm.activeMachine = null;
           Timeslot.getByUser(null, vm.user._id)
             .success(function(data) {
               vm.bookings = data;
               console.log(data);
             }.bind(this));
         });

         vm.showDates = false;

       }

  }

})();

(function () {

  angular
  .module('meanApp')
  .controller('loginCtrl', loginCtrl);

  loginCtrl.$inject = ['$location', 'authentication'];
  function loginCtrl($location, authentication) {
    var vm = this;

    vm.credentials = {
      email : "",
      password : ""
    };

    vm.onSubmit = function () {
      authentication
        .login(vm.credentials)
        .error(function(err){
          alert(err);
        })
        .then(function(res){
          if (res.data.user.role === 'admin') {
            $location.path('profile');
          } else {
            $location.path('user');
          }

        });
    };

  }

})();

(function () {

  angular
    .module('meanApp')
    .controller('registerCtrl', registerCtrl);

  registerCtrl.$inject = ['$location', 'authentication'];
  function registerCtrl($location, authentication) {
    var vm = this;
    vm.errorMessage = "Fyll i alla fält please :)";
    vm.showError = false;
    vm.credentials = {
      name : "",
      email : "",
      password : "",
      role: ''
    };

    vm.onSubmit = function () {
      console.log('Submitting registration');
      for (var key in vm.credentials) {
      if (Object.prototype.hasOwnProperty.call(vm.credentials, key)) {
          var val = vm.credentials[key];
          if (val === '') {
            vm.showError = true;
            return;
          } else {
            vm.showError = false;
          authentication
            .register(vm.credentials)
            .error(function(err){
              alert(err);
            })
            .then(function(res){
              if (res.data.user.role === 'admin') {
                $location.path('profile');
              } else {
                $location.path('user');
              }
            });
          }

      }
    }
    };
  }

})();


// vm.onSubmit = function () {
//   console.log('Submitting registration');
//   for (var key in vm.credentials) {
//   if (Object.prototype.hasOwnProperty.call(vm.credentials, key)) {
//       var val = vm.credentials[key];
//       if (val === '') {
//         vm.showError = true;
//         return;
//       } else {
//         vm.showError = false;
//       authentication
//         .register(vm.credentials)
//         .error(function(err){
//           alert(err);
//         })
//         .then(function(res){
//           if (res.data.user.role === 'admin') {
//             $location.path('profile');
//           } else {
//             $location.path('user');
//           }
//         });
//       }
//
//   }
// }
// };

 (function () {

  angular
    .module('meanApp')
    .service('authentication', authentication);

  authentication.$inject = ['$http', '$window'];
  function authentication ($http, $window) {

    var saveToken = function (token) {
      $window.localStorage['mean-token'] = token;
    };

    var getToken = function () {
      return $window.localStorage['mean-token'];
    };

    var isLoggedIn = function() {
      var token = getToken();
      var payload;

      if(token){
        payload = token.split('.')[1];
        payload = $window.atob(payload);
        payload = JSON.parse(payload);

        return payload.exp > Date.now() / 1000;
      } else {
        return false;
      }
    };

    var currentUser = function() {
      if(isLoggedIn()){
        var token = getToken();
        var payload = token.split('.')[1];
        payload = $window.atob(payload);
        payload = JSON.parse(payload);
        console.log('payload',payload);
        return {
          email : payload.email,
          name : payload.name,
          role : payload.role
        };
      }
    };

    register = function(user) {
      return $http.post('/api/register', user).success(function(data){
        saveToken(data.token);
      });
    };

    login = function(user) {
      return $http.post('/api/login', user).success(function(data) {
        saveToken(data.token);
      });
    };



    logout = function() {
      $window.localStorage.removeItem('mean-token');
    };

    return {
      currentUser : currentUser,
      saveToken : saveToken,
      getToken : getToken,
      isLoggedIn : isLoggedIn,
      register : register,
      login : login,
      logout : logout
    };
  }


})();

(function() {

  angular
    .module('meanApp')
    .service('meanData', meanData);

  meanData.$inject = ['$http', 'authentication'];
  function meanData ($http, authentication) {

    var getProfile = function () {
      return $http.get('/api/admin', {
        headers: {
          Authorization: 'Bearer '+ authentication.getToken()
        }
      });
    };

    return {
      getProfile : getProfile
    };
  }

})();

(function() {

  angular
    .module('meanApp')
    .service('Machines', machines);

  machines.$inject = ['$http', 'authentication'];
  function machines ($http, authentication) {

    var getMachines = function () {
      	return $http.get('/api/machines');
    };

    var createMachine = function (machine) {
      	return $http.post('/api/machines', machine);
    };

    var deleteMachine = function (id) {
        return $http.delete('/api/machines/' + id);
    };

    return {
      getMachines : getMachines,
      createMachine : createMachine,
      deleteMachine : deleteMachine
    };
  }

})();

(function() {

  angular
    .module('meanApp')
    .service('Timeslot', timeslots);

  timeslots.$inject = ['$http', 'authentication'];
  function timeslots ($http, authentication) {

    var getTimeslots = function () {
      	return $http.get('/api/timeslots');
    };

    var createTimeslot = function (timeslot) {
        return $http.post('/api/timeslots', timeslot);
    };

    var getByMachine = function (machine) {
      	return $http.get('/api/timeslots/' + machine);
    };

    var getByUser = function (machine, user) {
        return $http.get('/api/timeslots/' + machine + '/' + user);
    };

    return {
      getTimeslots : getTimeslots,
      createTimeslot: createTimeslot,
      getByMachine: getByMachine,
      getByUser: getByUser,

    };
  }

})();

(function() {

  angular
    .module('meanApp')
    .service('Users', users);

  users.$inject = ['$http', 'authentication'];
  function users ($http, authentication) {

    var getUsers = function () {
      	return $http.get('/api/users');
    };


    return {
      getUsers : getUsers
    };
  }

})();

(function () {

  angular
    .module('meanApp')
    .controller('navigationCtrl', navigationCtrl);

  navigationCtrl.$inject = ['$location','authentication'];
  function navigationCtrl($location, authentication) {
    var vm = this;

    vm.isLoggedIn = authentication.isLoggedIn();

    vm.currentUser = authentication.currentUser();

    vm.logout = authentication.logout();



  }

})();

(function () {

  angular
    .module('meanApp')
    .directive('navigation', navigation);

  function navigation () {
    return {
      restrict: 'EA',
      templateUrl: '/common/directives/navigation/navigation.template.html',
      controller: 'navigationCtrl as navvm'
    };
  }

})();
//# sourceMappingURL=app.min.js.map
